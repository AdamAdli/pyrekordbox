# -- Project metadata ------------------------------------------------------------------
[project]
name = "pyrekordbox-fork"
description = "Fork of pyrekordbox - Python package for interacting with Pioneer's Rekordbox DJ software"
authors = [
    {name = "Original: Dylan Jones", email = "dylanljones94@gmail.com"},
    {name = "Maintained by: Adam Adli"},
]
dependencies = [
    "bidict>=0.21.0",
    "blowfish>=0.6.0",
    "construct>=2.10.0",
    "numpy>=1.19.0",
    "packaging>=23.0",
    "psutil>=5.9.0",
    "sqlalchemy>=2.0.0",
    "frida-tools>=12.0.0",
    "python-dateutil>=2.8.0",
]
requires-python = ">=3.8"
readme = "README.md"
license = {file = "LICENSE"}
dynamic = ["version"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
]

[project.urls]
Homepage = "https://github.com/AdamAdli/pyrekordbox"
Documentation = "https://pyrekordbox-fork.readthedocs.io/en/stable/"  # If you set up RTD
Repository = "https://github.com/AdamAdli/pyrekordbox.git"
Issues = "https://github.com/AdamAdli/pyrekordbox/issues"
Changelog = "https://github.com/AdamAdli/pyrekordbox/blob/main/CHANGELOG.md"
Original = "https://github.com/dylanljones/pyrekordbox"  # Credit original project

# -- Build -----------------------------------------------------------------------------
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
package-type = "library"

[tool.pdm.version]
source = "scm"
write_to = "pyrekordbox/_version.py"
write_template = """# File generated by PDM -- Do not edit
from __future__ import annotations

VERSION_TUPLE = tuple

version: str
__version__: str
version_tuple: VERSION_TUPLE

__version__ = version = '{}'

def _parse_version(v: str) -> tuple:
    # Split on common delimiters
    parts = v.replace('-', '.').replace('+', '.').split('.')

    # Convert numeric parts to int
    parts = [int(x) if x.isdigit() else x for x in parts]

    # Ensure at least major.minor.patch
    if len(parts) < 3:
        parts.extend([0] * (3 - len(parts)))

    return tuple(parts)

version_tuple = _parse_version(version)
"""

[tool.pdm.dev-dependencies]
test = [
    "hypothesis>=6.0.0,<7.0.0",
    "pytest>=6.2.0,<8.0.0",
    "pytest-cov>=4.0.0,<5.0.0",
    "pytest-sugar>=0.9.7",
    "pytest-xdist>=3.3.1",
]
docs = [
    "sphinx>=7.0.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0,<2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.2",
]
lint = [
    "ruff>=0.2.0",
    "black>=23.0.0",
    "mypy>=1.6.0",
    "types-python-dateutil",
]
dev = [
    "pre-commit>=3.5.0",
    "commitizen>=3.12.0",
    "pip-audit>=2.6.1",
    "pdm-bump>=0.7.3",
]

[tool.pdm.scripts]
test = "pytest tests/ {args}"
test-cov = "pytest tests/ --cov=pyrekordbox --cov-report=xml -v {args}"
lint = { composite = [
    "black .",
    "ruff check .",
    "mypy pyrekordbox",
]}
format = { composite = [
    "black .",
    "ruff check --fix .",
]}
docs = { composite = [
    "sphinx-build -b html docs/source docs/build/html",
    "python -m http.server 8000 --directory docs/build/html"
]}
security = "pip-audit"
publish = { composite = [
    "pdm build",
    "pdm publish"
]}

[tool.pdm.build]
includes = ["pyrekordbox"]
excludes = [
    "tests",
    "docs",
    ".github",
    ".resources",
    "logos",
]


# -- Ruff ------------------------------------------------------------------------------
[tool.ruff]
exclude = [
    ".git",
    ".idea",
    "__pycache__",
    "build",
    "dist",
    ".ruff_cache",
    "*/structs.py",
    "*/_version.py",
    "docs/*",
]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "F", # flake8
    "E", # pycodestyle Errors
    "W", # pycodestyle Warnings
    "I", # isort
    "NPY", # Numpy
    "N", # pep8-naming
    "D", # pydocstyle
]
ignore = [
    "E203",  # Whitespace before ':'
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D401", # First line should be in imperative mood
    "D403", # First word of the first line should be capitalized
    "D404", # First word of the docstring should not be "This"
    #"N802", # Function name should be lowercase
    #"N803", # Argument name should be lowercase
    "N813", # Camelcase imported as lowercase
    #"N815", # Variable in class scope should not be mixedCase
    "N818", # Exception name should be named with an Error suffix
]
fixable = ["ALL"]  # Allow fix for all enabled rules (when `--fix`) is provided.
unfixable = []

[tool.ruff.lint.per-file-ignores]
"*__init__.py" = ["F401"]
"rbxml.py" = ["N803"]
"tables.py" = ["N802", "N815"]


[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
combine-as-imports = true
length-sort = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"



[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.4.0"
tag_format = "v$version"
version_files = [
    "pyrekordbox/__init__.py",
    "pyproject.toml:version",
]

# -- Coverage --------------------------------------------------------------------------

[tool.coverage.run]
branch = true
source = ["pyrekordbox"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "@abstract",
    "@property",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
omit = [
    "pyrekordbox/utils.py",
    "pyrekordbox/config.py",
    "pyrekordbox/_version.py",
    "pyrekordbox/__main__.py",
]
ignore_errors = true
